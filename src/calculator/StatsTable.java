package calculator;

import calculator.funcTools.HashMapOrig;

public class StatsTable {
	// 0.995 0.99 0.975 0.95 0.90 0.1 0.05 0.025 0.01
	private static HashMapOrig<Double> createHashMap(Double[] keys, Double[][] values) {
		HashMapOrig<Double> hashmap = new HashMapOrig<>();
		for (int i = 0; i < keys.length; i++) {
			hashmap.put(keys[i].intValue(), keys[i], values[i]);
		}
		return hashmap;
	}

	private static HashMapOrig<Double> createChiSquareSfLevelMapping() {
		Double[] sfLevel = { 0.995, 0.99, 0.975, 0.95, 0.90, 0.1, 0.05, 0.025, 0.01 };
		HashMapOrig<Double> hashmap = new HashMapOrig<>();
		for (int i = 0; i < sfLevel.length; i++) {
			Double hashVal = sfLevel[i] * 100;
			hashmap.put(hashVal.intValue(), sfLevel[i], i);
		}
		return hashmap;
	}

	public static Double getCriticalVal(Double sfLevel, Integer df) {
		Double[] chiSquareTable = (Double[]) StatsTable.getChiSquareTable().get(df, Double.valueOf(df));
		Double hashVal = sfLevel * 100;
		Integer idx = (Integer) chiSquareSfLevelMapping.get(hashVal.intValue(), sfLevel);
		return chiSquareTable[idx];
	}

	private static HashMapOrig<Double> chiSquareSfLevelMapping = createChiSquareSfLevelMapping();
	private static HashMapOrig<Double> chiSquareTable = createHashMap(
			new Double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0,
					18.0, 19.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 38.0, 42.0, 46.0, 50.0, 55.0, 60.0, 65.0,
					70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0 },

			new Double[][] { 
					{ 0.00, 0.00, 0.00, 0.00, 0.02, 2.71, 3.84, 5.02, 6.63 },
					{ 0.01, 0.02, 0.05, 0.10, 0.21, 4.61, 5.99, 7.38, 9.21 },
					{ 0.07, 0.11, 0.22, 0.35, 0.58, 6.25, 7.81, 9.35, 11.34 },
					{ 0.21, 0.30, 0.48, 0.71, 1.06, 7.78, 9.49, 11.14, 13.28 },
					{ 0.41, 0.55, 0.83, 1.15, 1.61, 9.24, 11.07, 12.83, 15.09 },
					{ 0.68, 0.87, 1.24, 1.64, 2.20, 10.64, 12.59, 14.45, 16.81 },
					{ 0.99, 1.24, 1.69, 2.17, 2.83, 12.02, 14.07, 16.01, 18.48 },
					{ 1.34, 1.65, 2.18, 2.73, 3.49, 13.36, 15.51, 17.53, 20.09 },
					{ 1.73, 2.09, 2.70, 3.33, 4.17, 14.68, 16.92, 19.02, 21.67 },
					{ 2.16, 2.56, 3.25, 3.94, 4.87, 15.99, 18.31, 20.48, 23.21 },
					{ 2.60, 3.05, 3.82, 4.57, 5.58, 17.28, 19.68, 21.92, 24.72 },
					{ 3.07, 3.57, 4.40, 5.23, 6.30, 18.55, 21.03, 23.34, 26.22 },
					{ 3.57, 4.11, 5.01, 5.89, 7.04, 19.81, 22.36, 24.74, 27.69 },
					{ 4.07, 4.66, 5.63, 6.57, 7.79, 21.06, 23.68, 26.12, 29.14 },
					{ 4.60, 5.23, 6.26, 7.26, 8.55, 22.31, 25.00, 27.49, 30.58 },
					{ 5.14, 5.81, 6.91, 7.96, 9.31, 23.54, 26.30, 28.85, 32.00 },
					{ 5.70, 6.41, 7.56, 8.67, 10.09, 24.77, 27.59, 30.19, 33.41 },
					{ 6.26, 7.01, 8.23, 9.39, 10.86, 25.99, 28.87, 31.53, 34.81 },
					{ 6.84, 7.63, 8.91, 10.12, 11.65, 27.20, 30.14, 32.85, 36.19 },
					{ 7.43, 8.26, 9.59, 10.85, 12.44, 28.41, 31.41, 34.17, 37.57 },
					{ 8.64, 9.54, 10.98, 12.34, 14.04, 30.81, 33.92, 36.78, 40.29 },
					{ 9.89, 10.86, 12.40, 13.85, 15.66, 33.20, 36.42, 39.36, 42.98 },
					{ 11.16, 12.20, 13.84, 15.38, 17.29, 35.56, 38.89, 41.92, 45.64 },
					{ 12.46, 13.56, 15.31, 16.93, 18.94, 37.92, 41.34, 44.46, 48.28 },
					{ 13.79, 14.95, 16.79, 18.49, 20.60, 40.26, 43.77, 46.98, 50.89 },
					{ 15.13, 16.36, 18.29, 20.07, 22.27, 42.58, 46.19, 49.48, 53.49 },
					{ 16.50, 17.79, 19.81, 21.66, 23.95, 44.90, 48.60, 51.97, 56.06 },
					{ 19.29, 20.69, 22.88, 24.88, 27.34, 49.51, 53.38, 56.90, 61.16 },
					{ 22.14, 23.65, 26.00, 28.14, 30.77, 54.09, 58.12, 61.78, 66.21 },
					{ 25.04, 26.66, 29.16, 31.44, 34.22, 58.64, 62.83, 66.62, 71.20 },
					{ 27.99, 29.71, 32.36, 34.76, 37.69, 63.17, 67.50, 71.42, 76.15 },
					{ 31.73, 33.57, 36.40, 38.96, 42.06, 68.80, 73.31, 77.38, 82.29 },
					{ 35.53, 37.48, 40.48, 43.19, 46.46, 74.40, 79.08, 83.30, 88.38 },
					{ 39.38, 41.44, 44.60, 47.45, 50.88, 79.97, 84.82, 89.18, 94.42 },
					{ 43.28, 45.44, 48.76, 51.74, 55.33, 85.53, 90.53, 95.02, 100.43 },
					{ 47.21, 49.48, 52.94, 56.05, 59.79, 91.06, 96.22, 100.84, 106.39 },
					{ 51.17, 53.54, 57.15, 60.39, 64.28, 96.58, 101.88, 106.63, 112.33 },
					{ 55.17, 57.63, 61.39, 64.75, 68.78, 102.08, 107.52, 112.39, 118.24 },
					{ 59.20, 61.75, 65.65, 69.13, 73.29, 107.57, 113.15, 118.14, 124.12 },
					{ 63.25, 65.90, 69.92, 73.52, 77.82, 113.04, 118.75, 123.86, 129.97 },
					{ 67.33, 70.06, 74.22, 77.93, 82.36, 118.50, 124.34, 129.56, 135.81 } });

	private static Double[][] sndTable = { 
			{ 0.500, 0.504, 0.508, 0.512, 0.516, 0.519, 0.5239, 0.5279, 0.5319, 0.5359 },
			{ 0.5398, 0.5438, 0.5478, 0.5517, 0.5557, 0.5596, 0.5636, 0.5675, 0.5714, 0.5753 },
			{ 0.5793, 0.5832, 0.5871, 0.5910, 0.5948, 0.5987, 0.6026, 0.6064, 0.6103, 0.6141 },
			{ 0.6179, 0.6217, 0.6255, 0.6293, 0.6331, 0.6368, 0.6406, 0.6443, 0.6408, 0.6517 },
			{ 0.6554, 0.6591, 0.6628, 0.6664, 0.6700, 0.6736, 0.6772, 0.6808, 0.6844, 0.6879 },
			{ 0.6915, 0.6950, 0.6985, 0.7019, 0.7054, 0.7088, 0.7123, 0.7157, 0.7190, 0.7224 },
			{ 0.7257, 0.7291, 0.7324, 0.7357, 0.7389, 0.7422, 0.7454, 0.7486, 0.7517, 0.7549 },
			{ 0.7580, 0.7611, 0.7642, 0.7673, 0.7704, 0.7734, 0.7764, 0.7794, 0.7824, 0.7852 },
			{ 0.7881, 0.7910, 0.7939, 0.7967, 0.7995, 0.8023, 0.8051, 0.8078, 0.8106, 0.8133 },
			{ 0.8159, 0.8186, 0.8212, 0.8238, 0.8264, 0.8289, 0.8315, 0.8340, 0.8365, 0.8389 },
			{ 0.8413, 0.8438, 0.8461, 0.8485, 0.8508, 0.8531, 0.7554, 0.8577, 0.8599, 0.8621 },
			{ 0.8643, 0.8665, 0.8686, 0.8708, 0.8729, 0.8749, 0.8770, 0.8790, 0.8810, 0.8830 },
			{ 0.8849, 0.8869, 0.8888, 0.8907, 0.8925, 0.8944, 0.8962, 0.898, 0.8997, 0.9015 },
			{ 0.9032, 0.9049, 0.9066, 0.9082, 0.9099, 0.9115, 0.9131, 0.9147, 0.9162, 0.9177 },
			{ 0.9192, 0.9207, 0.9222, 0.9236, 0.9251, 0.9265, 0.9279, 0.9292, 0.9306, 0.9319 },
			{ 0.9332, 0.9345, 0.9357, 0.9370, 0.9382, 0.9394, 0.9406, 0.9418, 0.9429, 0.9441 },
			{ 0.9452, 0.9463, 0.9474, 0.9484, 0.9495, 0.9505, 0.9515, 0.9525, 0.9535, 0.9545 },
			{ 0.9554, 0.9564, 0.9573, 0.9582, 0.9591, 0.9599, 0.9608, 0.9616, 0.9625, 0.9633 },
			{ 0.9641, 0.9649, 0.9656, 0.9664, 0.9671, 0.9678, 0.9686, 0.9693, 0.9699, 0.9706 },
			{ 0.9713, 0.9719, 0.9726, 0.9732, 0.9738, 0.9744, 0.975, 0.9756, 0.9761, 0.9767 },
			{ 0.9772, 0.9778, 0.9783, 0.9788, 0.9793, 0.9798, 0.9803, 0.9808, 0.9812, 0.9817 },
			{ 0.9821, 0.9826, 0.9830, 0.9834, 0.9838, 0.9842, 0.9846, 0.9850, 0.9854, 0.9857 },
			{ 0.9861, 0.9864, 0.9868, 0.9871, 0.9875, 0.9878, 0.9881, 0.9884, 0.9887, 0.989 },
			{ 0.9893, 0.9896, 0.9898, 0.9901, 0.9904, 0.9906, 0.9909, 0.9911, 0.9913, 0.9916 },
			{ 0.9918, 0.992, 0.9922, 0.9925, 0.9927, 0.9929, 0.9931, 0.9932, 0.9934, 0.9936 },
			{ 0.9938, 0.994, 0.9941, 0.9943, 0.9945, 0.9946, 0.9948, 0.9949, 0.9951, 0.9952 },
			{ 0.9953, 0.9955, 0.9956, 0.9957, 0.9959, 0.996, 0.9961, 0.9962, 0.9963, 0.9964 },
			{ 0.9965, 0.9966, 0.9967, 0.9968, 0.9969, 0.9970, 0.9971, 0.9972, 0.9973, 0.9974 },
			{ 0.9974, 0.9975, 0.9976, 0.9977, 0.9977, 0.9978, 0.9979, 0.9979, 0.9980, 0.9981 },
			{ 0.9981, 0.9982, 0.9982, 0.9983, 0.9984, 0.984, 0.9985, 0.9985, 0.9986, 0.9986 },
			{ 0.9987, 0.9987, 0.9987, 0.9988, 0.9988, 0.9989, 0.9989, 0.999, 0.999, 0.9999 } };

	public static HashMapOrig<Double> getChiSquareTable() {
		return StatsTable.chiSquareTable;
	}

	public static Double[][] getNormalTable() {
		return StatsTable.sndTable;
	}
}
